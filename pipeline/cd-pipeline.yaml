trigger: none
pr: none
# define variables: registryName, registryLogin and registryPassword in the Azure pipeline UI definition

variables:
  - template: variables.yaml
  # - template: cd-vars-dev.yaml
  # - template: cd-vars-sit.yaml
  - template: cd-vars-dev.yaml
  # - template: cd-vars-ppd.yaml
  # - template: cd-vars-prod.yaml


resources:
  pipelines:
    - pipeline: ci-pipeline
      source: "po-service-ui-ci"
      trigger:
        enabled: false

stages:
   - stage: dev
     condition: or(eq(variables['Build.Reason'], 'Manual'), eq(variables['build.sourceBranch'], 'refs/heads/dev'))
     displayName: dev
     jobs:
       - deployment: dev
         variables:
           - template: cd-vars-dev.yaml
         displayName: deploy helm chart into RMS-AKS-DEV
         pool:
           vmImage: ubuntu-latest
         environment: dev-$(projectName)
         strategy:
 
           runOnce:
             deploy:
               steps:
                 - template: cd-steps.yaml

  #  - stage: sit
  #    condition: eq(variables['build.sourceBranch'], 'refs/heads/dev')
  #    displayName: sit
  #    jobs:
  #      - deployment: sit
  #        variables:
  #          - template: cd-vars-sit.yaml
  #        displayName: deploy helm chart into AKS-SIT
  #        pool:
  #          vmImage: ubuntu-latest
  #        environment: sit-$(projectName)
  #        strategy:
            
  #          runOnce:
  #            deploy:
  #              steps:
  #                - template: cd-steps.yaml                


  #  - stage: ft
  #    condition: or(eq(variables['Build.Reason'], 'Manual'), eq(variables['build.sourceBranch'], 'refs/heads/main'))
  #    displayName: ft
  #    jobs:
  #      - deployment: ft
  #        variables:
  #          - template: cd-vars-uat.yaml
  #        displayName: deploy helm chart into AKS-UAT
  #        pool:
  #          vmImage: ubuntu-latest
  #        environment: uat-$(projectName)
  #        strategy:
  #          runOnce:
  #            deploy:
  #              steps:
  #                - template: cd-steps.yaml   

  #  - stage: pt
  #    condition: and(eq(variables['k8sNamespace'], 'ns-sahla'), succeeded('ft'))
  #    displayName: pt
  #    jobs:
  #      - deployment: pt
  #        variables:
  #          - template: cd-vars-ppd.yaml
  #        displayName: deploy helm chart into AKS-PPD
  #        pool:
  #          vmImage: ubuntu-latest
  #        environment: ppd-$(projectName)
  #        strategy:
  #          runOnce:
  #            deploy:
  #              steps:
  #                - template: cd-steps.yaml

  #  - stage: CreatePR
  #    condition: or(eq(variables['build.sourceBranch'], 'refs/heads/release'), startsWith(variables['build.sourceBranch'], 'refs/heads/release/'))
  #    displayName: CreatePR
  #    jobs:
  #      - deployment: CreatePRJob
  #        displayName: CreatePRJob 
  #        pool:
  #          vmImage: windows-latest
  #        environment: pr-to-main-$(projectName)
  #        strategy:
  #          runOnce:
  #            deploy:
  #              steps:
  #                - task: CreatePullRequest@1
  #                  inputs:
  #                    repoType: 'Azure DevOps'
  #                    repositorySelector: 'currentBuild'
  #                    sourceBranch: '$(Build.SourceBranch)'
  #                    targetBranch: 'main'
  #                    title: 'Merge branch $(Build.SourceBranch) into main'
  #                    linkWorkItems: false
  #                    autoComplete: true

  #  - stage: tag
  #    condition: succeeded('CreatePR')
  #    displayName: "Auto-Tag"
  #    jobs:
  #      - deployment: autoTag
  #        displayName: Create git Tag
  #        pool:
  #          vmImage: ubuntu-latest
  #        environment: tag-$(projectName)
  #        strategy:
  #          runOnce:
  #            deploy:
  #              steps:
  #                - checkout: self
  #                - task: AzureKeyVault@1
  #                  displayName: PullSecrets
  #                  inputs:
  #                    azureSubscription: $(azureSubscription)-$(project)
  #                    KeyVaultName: $(KeyVaultName)
  #                    SecretsFilter: 'PIPELINE-PYTHON-PAT'
  #                    RunAsPreJob: true
  #                - task: Bash@3
  #                  inputs:
  #                    targetType: 'inline'
  #                    script: |
  #                      ls -ltr
  #                      git branch --show-current
  #                      git checkout --track origin/main
  #                      git branch --show-current
  #                      git tag $(Build.BuildNumber)
  #                      export PROJECT_URL="https://$(PIPELINE-PYTHON-PAT)@dev.azure.com/landmarkgroup/$(System.TeamProject)/_git/$(Build.Repository.Name)"
  #                      echo $PROJECT_URL > project.txt
  #                      PROJECT=$(sed -e 's/\s\+/%20/g' project.txt)
  #                      echo $PROJECT
  #                      git push $PROJECT --tags                 


  #  - stage: production
  #    condition: succeeded('tag')
  #    displayName: production
  #    jobs:
  #      - deployment: production
  #        variables:
  #          - template: cd-vars-prod.yaml
  #        displayName: deploy helm chart into AKS-PROD
  #        pool:
  #          vmImage: ubuntu-latest
  #        environment: production-$(projectName)
  #        strategy:
  #          runOnce:
  #            deploy:
  #              steps:
  #                - template: cd-steps.yaml                                       

